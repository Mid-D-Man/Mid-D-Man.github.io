name: Build and Prepare MidManStudio Portfolio

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job to update project structure on every push
  update-structure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update Project Structure
        run: |
          echo "Generating comprehensive project structure for MidManStudio Portfolio..."
          
          # Verify project directory structure
          echo "Repository root contents:"
          ls -la
          
          # Enhanced structure generation function
          generate_comprehensive_structure() {
            local base_path="$1"
            local output_file="$2"
          
            # Initialize output file with metadata
            {
              echo "Project Structure Documentation - MidManStudio Portfolio"
              echo "Generated: $(date -u)"
              echo "Repository: ${{ github.repository }}"
              echo "Commit: ${{ github.sha }}"
              echo "Branch: ${{ github.ref_name }}"
              echo "Technology Stack: Leptos 0.8 (Rust WASM)"
              echo "=================================="
              echo
            } > "$output_file"
          
            # Capture all project-relevant files
            echo "Source Files:" >> "$output_file"
            echo "============" >> "$output_file"
            find "$base_path" -type f \( \
              -name "*.rs" -o \
              -name "*.toml" -o \
              -name "*.lock" -o \
              -name "*.json" -o \
              -name "*.css" -o \
              -name "*.scss" -o \
              -name "*.js" -o \
              -name "*.ts" -o \
              -name "*.html" -o \
              -name "*.md" -o \
              -name "*.yml" -o \
              -name "*.yaml" \
            \) -not -path "*/target/*" \
              -not -path "*/dist/*" \
              -not -path "*/.git/*" \
              -not -path "*/node_modules/*" | \
            sed "s|^$base_path/||" | sort >> "$output_file"
          
            echo >> "$output_file"
            echo "Directory Structure:" >> "$output_file"
            echo "==================" >> "$output_file"
          
            # Generate hierarchical directory tree
            find "$base_path" -type d \
              -not -path "*/target" \
              -not -path "*/target/*" \
              -not -path "*/dist" \
              -not -path "*/dist/*" \
              -not -path "*/.git" \
              -not -path "*/.git/*" \
              -not -path "*/node_modules" \
              -not -path "*/node_modules/*" | \
            sed "s|^$base_path||" | \
            sed 's|^/||' | \
            sort | \
            sed 's|[^/]*/|  |g' | \
            sed 's|^|./|' >> "$output_file"
          
            echo >> "$output_file"
            echo "File Count Summary:" >> "$output_file"
            echo "==================" >> "$output_file"
          
            # Generate file type statistics
            for ext in rs toml lock json css scss js html yml yaml; do
              count=$(find "$base_path" -name "*.$ext" -not -path "*/target/*" -not -path "*/dist/*" | wc -l)
              if [ "$count" -gt 0 ]; then
                printf "%-10s: %d files\n" ".$ext" "$count" >> "$output_file"
              fi
            done
            
            # Add MidManStudio specific information
            echo >> "$output_file"
            echo "Project Information:" >> "$output_file"
            echo "==================" >> "$output_file"
            echo "Project Type: Leptos CSR (Client Side Rendering)" >> "$output_file"
            echo "Build Tool: Trunk" >> "$output_file"
            echo "Target: WebAssembly (WASM)" >> "$output_file"
            echo "Framework: Leptos 0.8" >> "$output_file"
            echo "Portfolio Type: Game Developer & Digital Artist" >> "$output_file"
            echo "Services: Game Dev, Web Dev, Software Dev, Digital Art" >> "$output_file"
            echo "Primary Colors: Royal Blue (#4169e1), Gold (#ffd700)" >> "$output_file"
            echo "Theme System: Gradient backgrounds with glow effects" >> "$output_file"
            echo "Responsive: Mobile-first approach" >> "$output_file"
            echo "PWA Ready: Service worker and manifest support" >> "$output_file"
          }
          
          # Create others directory (lowercase) and generate structure
          mkdir -p "others"
          generate_comprehensive_structure "." "others/ProjectStructure.txt"
          
          echo "Project structure documentation completed successfully"

      - name: Commit Updated Project Structure
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - MidManStudio"
          
          STRUCTURE_FILE="others/ProjectStructure.txt"
          
          if [ -f "$STRUCTURE_FILE" ]; then
            # Verify changes exist before committing
            if ! git diff --quiet "$STRUCTURE_FILE" 2>/dev/null; then
              git add "$STRUCTURE_FILE"
              git commit -m "Auto-update MidManStudio project structure documentation [skip ci]"
              git push
              echo "Project structure committed successfully"
            else
              echo "No changes detected in project structure"
            fi
          else
            echo "Warning: Project structure file not found"
          fi

  # Job to build - only on publish keywords
  build:
    runs-on: ubuntu-latest
    needs: update-structure
    if: contains(github.event.head_commit.message, '--publish') || contains(github.event.head_commit.message, '--PUBLISH') || contains(github.event.head_commit.message, 'deploy') || contains(github.event.head_commit.message, 'DEPLOY')
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Check Deploy Condition
        id: check
        run: echo "should_deploy=true" >> $GITHUB_OUTPUT

      - name: Setup Rust (Current Nightly - Leptos 0.8 Compatible)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          targets: wasm32-unknown-unknown

      - name: Display Build Information
        run: |
          echo "Building MidManStudio Portfolio (Leptos 0.8 WASM)"
          echo "Framework: Leptos 0.8.9 with CSR"
          echo "Language: Rust (WASM target)"
          echo "Build Tool: Trunk"
          echo "Repository: ${{ github.event.repository.name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.event.head_commit.message }}"
          echo "Author: ${{ github.event.head_commit.author.name }}"

      - name: Install Trunk
        run: |
          echo "Installing Trunk for Leptos 0.8 WASM builds..."
          cargo install trunk

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "."

      - name: Build MidManStudio Portfolio
        run: |
          echo "Building MidManStudio Portfolio with Trunk and Leptos 0.8..."
          
          # FIXED: Use correct repository name for GitHub Pages path
          # The repository name appears to be "Mid-D-Man.github.io" based on error messages
          echo "Repository name: ${{ github.event.repository.name }}"
          
          # Build with the correct public URL - no subdirectory needed for username.github.io repos
          if [[ "${{ github.event.repository.name }}" == *".github.io"* ]]; then
            # This is a GitHub Pages user/org repo (username.github.io)
            echo "Building for GitHub Pages user repository (root domain)"
            trunk build --release --public-url /
          else
            # This is a project repository
            echo "Building for GitHub Pages project repository"
            trunk build --release --public-url /${{ github.event.repository.name }}/
          fi
          
          echo "Build completed successfully with Leptos 0.8"

      - name: Prepare Deployment Artifacts
        run: |
          echo "Preparing MidManStudio portfolio files..."
          
          mkdir -p ./deployment-ready
          
          # Copy built files from dist directory (Trunk output)
          if [ -d "./dist" ]; then
            cp -r ./dist/* ./deployment-ready/
            echo "Portfolio files copied successfully"
          else
            echo "ERROR: dist directory not found"
            exit 1
          fi
          
          # Critical: Add .nojekyll to prevent Jekyll processing
          touch ./deployment-ready/.nojekyll
          echo ".nojekyll file created"
          
          # Verify .nojekyll was created
          if [ -f "./deployment-ready/.nojekyll" ]; then
            echo "✅ .nojekyll file verified"
            ls -la ./deployment-ready/.nojekyll
          else
            echo "❌ .nojekyll file creation failed"
            exit 1
          fi
          
          # Create 404.html for SPA routing
          if [ -f "./deployment-ready/index.html" ]; then
            cp ./deployment-ready/index.html ./deployment-ready/404.html
            echo "404.html created for SPA routing"
          else
            echo "ERROR: index.html not found"
            exit 1
          fi
          
          # FIXED: Only update paths if this is NOT a .github.io repo
          if [[ "${{ github.event.repository.name }}" != *".github.io"* ]]; then
            echo "Updating paths for GitHub Pages project repository..."
            # Update paths for GitHub Pages subpath
            find ./deployment-ready -name "*.html" -type f -exec sed -i 's|href="/|href="/${{ github.event.repository.name }}/|g' {} \;
            find ./deployment-ready -name "*.html" -type f -exec sed -i 's|src="/|src="/${{ github.event.repository.name }}/|g' {} \;
            find ./deployment-ready -name "*.css" -type f -exec sed -i 's|url(/|url(/${{ github.event.repository.name }}/|g' {} \;
            echo "Paths updated for GitHub Pages project repository"
          else
            echo "Skipping path updates for GitHub Pages user repository (root domain)"
          fi
          
          # Final verification of all required files
          echo "📋 Final verification of deployment files:"
          ls -la ./deployment-ready/
          echo ""
          echo "🔍 Checking for critical files:"
          [ -f "./deployment-ready/index.html" ] && echo "✅ index.html" || echo "❌ index.html"
          [ -f "./deployment-ready/404.html" ] && echo "✅ 404.html" || echo "❌ 404.html"  
          [ -f "./deployment-ready/.nojekyll" ] && echo "✅ .nojekyll" || echo "❌ .nojekyll"
          
          # Count file types
          wasm_files=$(find ./deployment-ready -name "*.wasm" | wc -l)
          js_files=$(find ./deployment-ready -name "*.js" | wc -l)
          css_files=$(find ./deployment-ready -name "*.css" | wc -l)
          
          echo "📊 File summary for artifact upload:"
          echo "  - WASM files: $wasm_files"
          echo "  - JavaScript files: $js_files"
          echo "  - CSS files: $css_files"
          echo "  - Total files: $(find ./deployment-ready -type f | wc -l)"
          
          # ADDED: Show actual file names for debugging
          echo ""
          echo "🗂️ Actual files generated:"
          find ./deployment-ready -name "*.js" -o -name "*.wasm" -o -name "*.css" | sort

      # UPDATED: Using v4 of upload-artifact
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: portfolio-build
          path: ./deployment-ready/
          retention-days: 1

  # Job that runs when deployment is skipped
  deployment-skipped:
    runs-on: ubuntu-latest
    needs: update-structure
    if: "!(contains(github.event.head_commit.message, '--publish') || contains(github.event.head_commit.message, '--PUBLISH') || contains(github.event.head_commit.message, 'deploy') || contains(github.event.head_commit.message, 'DEPLOY'))"
    
    steps:
      - name: Deployment Skipped Notice
        run: |
          echo "MidManStudio portfolio deployment was skipped"
          echo ""
          echo "To deploy your portfolio, include one of these keywords in your commit message:"
          echo "  - '--publish' (case insensitive)"
          echo "  - 'deploy' (case insensitive)"
          echo ""
          echo "Example commit messages that trigger deployment:"
          echo "  - 'Updated portfolio design --publish'"
          echo "  - 'Added new game project --publish'"
          echo "  - 'Fixed responsive layout issues deploy'"
          echo "  - 'Portfolio ready for production DEPLOY'"
          echo ""
          echo "Current commit: ${{ github.event.head_commit.message }}"
          echo "Author: ${{ github.event.head_commit.author.name }}"
          echo ""
          echo "Project structure has been updated automatically"
          echo "Rust/Leptos 0.8 portfolio ready for deployment when triggered"
