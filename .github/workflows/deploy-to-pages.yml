name: Deploy to GitHub Pages

on:
  workflow_run:
    workflows: ["Build and Prepare MidManStudio Portfolio"]
    types:
      - completed
    branches: [main, master]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only deploy if the previous workflow succeeded and was triggered by publish keywords
    if: github.event.workflow_run.conclusion == 'success'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      # UPDATED: Using v4 of download-artifact
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: portfolio-build
          path: ./pages/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Verify Download
        run: |
          echo "Verifying downloaded artifacts..."
          ls -la ./pages/
          
          # Check essential files
          if [ -f "./pages/index.html" ]; then
            echo "‚úÖ Index HTML found"
          else
            echo "‚ùå Index HTML missing"
            exit 1
          fi
          
          if [ -f "./pages/.nojekyll" ]; then
            echo "‚úÖ .nojekyll found"
          else
            echo "‚ùå .nojekyll missing"
            exit 1
          fi
          
          # Check WASM files
          wasm_count=$(find ./pages -name "*.wasm" -type f | wc -l)
          if [ "$wasm_count" -gt 0 ]; then
            echo "‚úÖ Found $wasm_count WASM files"
          else
            echo "‚ùå No WASM files found"
            exit 1
          fi
          
          # Check JavaScript files
          js_count=$(find ./pages -name "*.js" -type f | wc -l)
          if [ "$js_count" -gt 0 ]; then
            echo "‚úÖ Found $js_count JavaScript files"
          else
            echo "‚ùå No JavaScript files found"
            exit 1
          fi
          
          # Check CSS files
          css_count=$(find ./pages -name "*.css" -type f | wc -l)
          if [ "$css_count" -gt 0 ]; then
            echo "‚úÖ Found $css_count CSS files"
          else
            echo "‚ö†Ô∏è No CSS files found - this may cause styling issues"
          fi
          
          echo "üìä Deployment Verification Summary:"
          echo "  - Total files: $(find ./pages -type f | wc -l)"
          echo "  - Size: $(du -sh ./pages | cut -f1)"
          echo "  - WASM files: $wasm_count"
          echo "  - JavaScript files: $js_count" 
          echo "  - CSS files: $css_count"

      # UPDATED: Using v3 of configure-pages (latest stable)
      - name: Setup Pages
        uses: actions/configure-pages@v3

      # UPDATED: Using v2 of upload-pages-artifact (latest stable)
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./pages/

      # UPDATED: Using v2 of deploy-pages (latest stable)
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Deployment Success
        run: |
          echo "üéâ MidManStudio Portfolio deployed successfully!"
          echo "üåê Your portfolio is available at:"
          echo "   ${{ steps.deployment.outputs.page_url }}"
          echo ""
          echo "üéÆ Portfolio Features Deployed:"
          echo "   ‚úÖ Game Development showcase"
          echo "   ‚úÖ Web Development projects" 
          echo "   ‚úÖ Software Development portfolio"
          echo "   ‚úÖ Digital Art & Design gallery"
          echo "   ‚úÖ Interactive Leptos 0.8 WASM interface"
          echo "   ‚úÖ Royal blue & gold theme with glow effects"
          echo "   ‚úÖ Mobile-first responsive design"
          echo "   ‚úÖ Fast WASM performance"
          echo "   ‚úÖ Cross-platform compatibility"
          echo ""
          echo "ü¶Ä Built with Rust & Leptos 0.8 for maximum performance!"
          
  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Cleanup Build Artifacts
        continue-on-error: true
        run: |
          echo "Cleaning up temporary build artifacts..."
          echo "Build artifacts will expire automatically after 1 day"
